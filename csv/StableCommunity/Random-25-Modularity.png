,Method,Dataset,Rand Index,Modularity,Time,Rand Score with initial clustering,Threshold
0,Louvain (Mod),Karate Club,"(0.5115864527629234, 0.0)","(0.44490358126721763, 0.0)","(0.005273699993267655, 0.0)",,"(0.4, 0.4)"
1,Leiden (Mod),Karate Club,"(0.49732620320855614, 0.0)","(0.4342778433687525, 0.0)","(0.012241899967193604, 0.0)",,"(0.4, 0.4)"
2,LS (Balanced) Heuristic starting with everyone alone,Karate Club,"(0.49019607843137253, 0.0)","(0.25403384494293585, 0.0)","(0.008201400050893426, 0.0)",,"(0.4, 0.4)"
3,LS (Balanced) Heuristic starting with predicted number of clusters,Karate Club,"(0.48663101604278075, 0.0)","(0.2903525046382188, 0.0)","(0.0019066999666392803, 0.0)",,"(0.4, 0.4)"
4,LS (Balanced) Heuristic starting with the output of leiden,Karate Club,"(0.48663101604278075, 0.0)","(0.3009220217012424, 0.0)","(0.011713000014424324, 0.0)","(np.float64(0.5365418894830659), np.float64(0.0))","(0.4, 0.4)"
5,LS (Friend-Oriented) Heuristic starting with everyone alone,Karate Club,"(0.49376114081996436, 0.0)","(0.03934521466988993, 0.0)","(0.008383099921047688, 0.0)",,"(0.4, 0.4)"
6,LS (Friend-Oriented) Heuristic starting with predicted number of clusters,Karate Club,"(0.5008912655971479, 0.0)","(0.39143756676224206, 0.0)","(0.0018533000256866217, 0.0)",,"(0.4, 0.4)"
7,LS (Friend-Oriented) Heuristic starting with the output of leiden,Karate Club,"(0.5151515151515151, 0.0)","(0.25403384494293585, 0.0)","(0.01208989997394383, 0.0)","(np.float64(0.5721925133689839), np.float64(0.0))","(0.4, 0.4)"
8,LS (Enemy-Averse) Heuristic starting with everyone alone,Karate Club,"(0.48663101604278075, 0.0)","(0.29299488390397477, 0.0)","(0.008248999947682023, 0.0)",,"(0.4, 0.4)"
9,LS (Enemy-Averse) Heuristic starting with predicted number of clusters,Karate Club,"(0.48663101604278075, 0.0)","(0.2903525046382188, 0.0)","(0.0019202000694349408, 0.0)",,"(0.4, 0.4)"
10,LS (Enemy-Averse) Heuristic starting with the output of leiden,Karate Club,"(0.48663101604278075, 0.0)","(0.29299488390397477, 0.0)","(0.0136631999630481, 0.0)","(np.float64(0.5294117647058824), np.float64(0.0))","(0.4, 0.4)"
11,Louvain (Mod),Cora,"(0.782231252308829, 0.0)","(0.8148199408097332, 0.0)","(1.6423274000408128, 0.0)",,"(0.4, 0.4)"
12,Leiden (Mod),Cora,"(0.7978412551517238, 0.0)","(0.8093541890156958, 0.0)","(2.8684533999767154, 0.0)",,"(0.4, 0.4)"
13,LS (Balanced) Heuristic starting with everyone alone *6 starting clusters,Cora,"(0.38082131832837784, 0.0)","(0.1441499286147207, 0.0)","(20.64922080002725, 0.0)",,"(0.4, 0.4)"
14,LS (Balanced) Heuristic starting with predicted number of clusters,Cora,"(0.3829264792465947, 0.0)","(0.14461488779738904, 0.0)","(22.474868100020103, 0.0)",,"(0.4, 0.4)"
15,LS (Balanced) Heuristic starting with the output of leiden,Cora,"(0.3882758688426908, 0.0)","(0.1454828654509179, 0.0)","(174.1124500000151, 0.0)","(np.float64(0.3369618893846524), np.float64(0.0))","(0.4, 0.4)"
16,LS (Friend-Oriented) Heuristic starting with everyone alone *6 starting clusters,Cora,"(0.36292772335413576, 0.0)","(0.1173569900066353, 0.0)","(20.706286099972203, 0.0)",,"(0.4, 0.4)"
17,LS (Friend-Oriented) Heuristic starting with predicted number of clusters,Cora,"(0.36695797699383237, 0.0)","(0.12653918450915747, 0.0)","(22.42877330002375, 0.0)",,"(0.4, 0.4)"
18,LS (Friend-Oriented) Heuristic starting with the output of leiden,Cora,"(0.38436675198989, 0.0)","(0.14547920393100813, 0.0)","(177.70849390001968, 0.0)","(np.float64(0.33746880864152734), np.float64(0.0))","(0.4, 0.4)"
19,LS (Enemy-Averse) Heuristic starting with everyone alone *6 starting clusters,Cora,"(0.5275818096198979, 0.0)","(0.234916117450646, 0.0)","(21.029795599984936, 0.0)",,"(0.4, 0.4)"
20,LS (Enemy-Averse) Heuristic starting with predicted number of clusters,Cora,"(0.5363926010523622, 0.0)","(0.23629469764532673, 0.0)","(22.39579209999647, 0.0)",,"(0.4, 0.4)"
21,LS (Enemy-Averse) Heuristic starting with the output of leiden,Cora,"(0.7175362960190196, 0.0)","(0.43671220783763476, 0.0)","(145.07601389999036, 0.0)","(np.float64(0.8154721142570904), np.float64(0.0))","(0.4, 0.4)"
22,Louvain (Mod),Jazz,"(nan, 0.0)","(0.44021125576639364, 0.0)","(0.14852379995863885, 0.0)",,"(0.4, 0.4)"
23,Leiden (Mod),Jazz,"(nan, 0.0)","(0.43851970934875323, 0.0)","(0.3422100000316277, 0.0)",,"(0.4, 0.4)"
24,LS (Balanced) Heuristic starting with everyone alone,Jazz,"(nan, 0.0)","(0.034218036848525805, 0.0)","(1.169509100029245, 0.0)",,"(0.4, 0.4)"
25,LS (Balanced) Heuristic starting with predicted number of clusters,Jazz,"(nan, 0.0)","(0.034218036848525805, 0.0)","(1.1092894999310374, 0.0)",,"(0.4, 0.4)"
26,LS (Balanced) Heuristic starting with the output of leiden,Jazz,"(nan, 0.0)","(0.03453505217219664, 0.0)","(0.43918689992278814, 0.0)","(np.float64(0.43670204583910166), np.float64(0.0))","(0.4, 0.4)"
27,LS (Friend-Oriented) Heuristic starting with everyone alone,Jazz,"(nan, 0.0)","(0.02554430606695638, 0.0)","(1.1770595000125468, 0.0)",,"(0.4, 0.4)"
28,LS (Friend-Oriented) Heuristic starting with predicted number of clusters,Jazz,"(nan, 0.0)","(0.02554430606695638, 0.0)","(1.1345665000844747, 0.0)",,"(0.4, 0.4)"
29,LS (Friend-Oriented) Heuristic starting with the output of leiden,Jazz,"(nan, 0.0)","(0.03432969380855174, 0.0)","(0.47474710003007203, 0.0)","(np.float64(0.4270625032046352), np.float64(0.0))","(0.4, 0.4)"
30,LS (Enemy-Averse) Heuristic starting with everyone alone,Jazz,"(nan, 0.0)","(0.22514445577639564, 0.0)","(1.1474166999105364, 0.0)",,"(0.4, 0.4)"
31,LS (Enemy-Averse) Heuristic starting with predicted number of clusters,Jazz,"(nan, 0.0)","(0.22514445577639564, 0.0)","(1.17897130001802, 0.0)",,"(0.4, 0.4)"
32,LS (Enemy-Averse) Heuristic starting with the output of leiden,Jazz,"(nan, 0.0)","(0.2652432033563855, 0.0)","(0.40337410010397434, 0.0)","(np.float64(0.5418140798851458), np.float64(0.0))","(0.4, 0.4)"
33,Louvain (Mod),Random-25,"(0.8486746987951808, 0.0)","(0.23757465353922563, 0.0)","(0.3853332999860868, 0.0)",,"(0.4, 0.4)"
34,Leiden (Mod),Random-25,"(0.8744417670682731, 0.0)","(0.23154042611969627, 0.0)","(0.3449568999931216, 0.0)",,"(0.4, 0.4)"
35,LS (Balanced) Heuristic starting with everyone alone,Random-25,"(0.9575582329317269, 0.0)","(0.10761145698646059, 0.0)","(1.7259577000513673, 0.0)",,"(0.4, 0.4)"
36,LS (Balanced) Heuristic starting with predicted number of clusters,Random-25,"(0.930859437751004, 0.0)","(0.18152682685790122, 0.0)","(0.29942299996037036, 0.0)",,"(0.4, 0.4)"
37,LS (Balanced) Heuristic starting with the output of leiden,Random-25,"(0.864995983935743, 0.0)","(0.23581742955439994, 0.0)","(0.46541940001770854, 0.0)","(np.float64(0.8166104417670683), np.float64(0.0))","(0.4, 0.4)"
38,LS (Friend-Oriented) Heuristic starting with everyone alone,Random-25,"(0.9560803212851405, 0.0)","(0.12274134773668408, 0.0)","(1.8386767999036238, 0.0)",,"(0.4, 0.4)"
39,LS (Friend-Oriented) Heuristic starting with predicted number of clusters,Random-25,"(0.9296064257028113, 0.0)","(0.18704752194393973, 0.0)","(0.31835099996533245, 0.0)",,"(0.4, 0.4)"
40,LS (Friend-Oriented) Heuristic starting with the output of leiden,Random-25,"(0.8658955823293173, 0.0)","(0.23986979596835287, 0.0)","(0.4893385999603197, 0.0)","(np.float64(0.8211084337349398), np.float64(0.0))","(0.4, 0.4)"
41,LS (Enemy-Averse) Heuristic starting with everyone alone,Random-25,"(0.9582329317269076, 0.0)","(0.10205053371762524, 0.0)","(1.6682611999567598, 0.0)",,"(0.4, 0.4)"
42,LS (Enemy-Averse) Heuristic starting with predicted number of clusters,Random-25,"(0.9305060240963855, 0.0)","(0.18310516002984714, 0.0)","(0.30841709999367595, 0.0)",,"(0.4, 0.4)"
43,LS (Enemy-Averse) Heuristic starting with the output of leiden,Random-25,"(0.8523373493975903, 0.0)","(0.24024947169359936, 0.0)","(0.5068671000190079, 0.0)","(np.float64(0.8063935742971887), np.float64(0.0))","(0.4, 0.4)"
